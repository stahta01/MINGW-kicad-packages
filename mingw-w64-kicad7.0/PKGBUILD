# Maintainer:  Tim Stahlhut
# Contributor: Alexey Pavlov

MINGW_COMMON_PACKAGE_PREFIX="mingw-common"

_realname=kicad
_basepkgver=7.0
_basepkgname=${_realname}${_basepkgver}
_wx_basever=3.2
pkgbase=mingw-w64-${_realname}${_basepkgver}
pkgname=("${MINGW_PACKAGE_PREFIX}-${_basepkgname}")
pkgver=7.0.9
pkgrel=2
pkgdesc="Software for the creation of electronic schematic diagrams and printed circuit board artwork (mingw-w64)"
arch=(any)
mingw_arch=('mingw64' 'ucrt64' 'clang64' 'mingw32' 'clang32')
url="https://www.kicad.org/"
license=("spdx:GPL-3.0-or-later")
groups=("${MINGW_PACKAGE_PREFIX}-eda")
provides=(${MINGW_PACKAGE_PREFIX}-${_realname})
conflicts=(${MINGW_PACKAGE_PREFIX}-${_realname} ${MINGW_PACKAGE_PREFIX}-${_realname}-git)
replaces=(${MINGW_PACKAGE_PREFIX}-${_realname}-git)
depends=(
  "${MINGW_PACKAGE_PREFIX}-boost"
  "${MINGW_PACKAGE_PREFIX}-curl"
  "${MINGW_PACKAGE_PREFIX}-glew"
  "${MINGW_PACKAGE_PREFIX}-glm"
  "${MINGW_PACKAGE_PREFIX}-ngspice"
  "${MINGW_PACKAGE_PREFIX}-python"
  "${MINGW_PACKAGE_PREFIX}-wxPython"
  "${MINGW_PACKAGE_PREFIX}-wxwidgets${_wx_basever}-msw-libs"
  "${MINGW_PACKAGE_PREFIX}-openssl"
  "${MINGW_PACKAGE_PREFIX}-freeglut"
  "${MINGW_PACKAGE_PREFIX}-zlib"
  $([[ ${MINGW_PACKAGE_PREFIX} == *-clang-aarch64* ]] || echo "${MINGW_PACKAGE_PREFIX}-opencascade")
  "${MINGW_PACKAGE_PREFIX}-cairo"
  "${MINGW_COMMON_PACKAGE_PREFIX}-${_basepkgname}-library" # Really optional; but, kicad cannot do much without it.
)
makedepends=(
  "${MINGW_PACKAGE_PREFIX}-cc"
  "${MINGW_PACKAGE_PREFIX}-cmake"
  "${MINGW_PACKAGE_PREFIX}-ninja"
  "${MINGW_PACKAGE_PREFIX}-pkgconf"
  "${MINGW_PACKAGE_PREFIX}-doxygen"
  "${MINGW_PACKAGE_PREFIX}-swig"
  "${MINGW_PACKAGE_PREFIX}-wxwidgets${_wx_basever}-msw"
  "git"
)
optdepends=()
_doc=("ca" "de" "en" "es" "fr" "id" "it" "ja" "nl" "pl" "ru" "zh")
for _doclang in ${_doc[@]}; do
  optdepends+=("${MINGW_PACKAGE_PREFIX}-${_realname}-doc-${_doclang}: for documentation (${_doclang})");
done
optdepends+=("${MINGW_COMMON_PACKAGE_PREFIX}-${_basepkgname}-library-3d: for 3D model libraries")
source=(
  "https://gitlab.com/kicad/code/kicad/-/archive/${pkgver}/kicad-${pkgver}.tar.bz2"
  '001-Kicad-manager-build-the-PLUGIN_CONTENT_MANAGER-only-on-request.patch'
  '002-ki-6.0-cmake-fixes-for-MINGW-CLANG.patch'
  '003-ki-6.0-code-fixes-for-GNUC-CLANG.patch'
  '006-ki-6.0-rewrite-kiwin32_rc_for_clang.patch'
  '007-ki-6.0-manifest-remove-win10-11-manifest-support.patch'
  '012-ki-7.0-Set-StockEDALibraryPath-to-share-kicad7.0.patch'
  '015-under-ucrt64-define-JSON_SCHEMA_NO_REGEX-1.patch'
)
sha256sums=('45322e7495cbf0b6bba70b8fb8b58fdafa408d4d8473209fd1c5e8bad5a818f7'
            'a7c41a4f9e04926f0103dbe6702e42681ed1e59ceadca1ec116a8af081597a2a'
            '2924a86849c02aecd21cded0bd2069353fca33c3364f9b41f9bfdd80e19085cf'
            'd8d5f4bdd0aa6d8a907710c523f6f95840636cb2ef69e5275c6ed4966f134353'
            'e03dbb58409145c8fb54991d8259f14bc0ba6b21abca24f9b914ec354c9df89c'
            '550397b8d2ba66b924933020e409e868d3e4b2352a235f329798bc631b9fd28f'
            'c6e31774e70435e389b92e4e0a69757d4aaa4b884bdf2d756cdfaa97c196bda2'
            '263632b211ef9646e49d3e7083bbe4cefe0c7064db7caac248aecae5541cc544')

# Helper macros to help make tasks easier #
apply_patch_with_msg() {
  for _fname in "$@"
  do
    msg2 "Applying ${_fname}"
    patch -Nbp1 -i "${srcdir}"/${_fname}
  done
}

prepare() {
  cd ${_realname}-${pkgver}
  # https://gitlab.com/kicad/code/kicad/-/commit/aa3e2988
  apply_patch_with_msg \
    001-Kicad-manager-build-the-PLUGIN_CONTENT_MANAGER-only-on-request.patch

  apply_patch_with_msg \
    002-ki-6.0-cmake-fixes-for-MINGW-CLANG.patch \
    003-ki-6.0-code-fixes-for-GNUC-CLANG.patch \
    006-ki-6.0-rewrite-kiwin32_rc_for_clang.patch

  # This patch allows me to test view 3D program using my old Intel GPU driver under win10
  apply_patch_with_msg 007-ki-6.0-manifest-remove-win10-11-manifest-support.patch

  # 012 Change StockEDALibraryPath to use MINGW_COMMON_PACKAGE_PREFIX packages
  # 015 Hack to work around UCRT64 locking when PCM is started.
  apply_patch_with_msg \
    012-ki-7.0-Set-StockEDALibraryPath-to-share-kicad7.0.patch \
    015-under-ucrt64-define-JSON_SCHEMA_NO_REGEX-1.patch
}

build() {
  mkdir -p "${srcdir}"/build-${MSYSTEM} && cd "${srcdir}"/build-${MSYSTEM}

  declare -a _extra_config
  if check_option "debug" "n"; then
    _extra_config+=("-DCMAKE_BUILD_TYPE=Release")
  else
    _extra_config+=("-DCMAKE_BUILD_TYPE=Debug")
  fi

  MSYS2_ARG_CONV_EXCL="-DCMAKE_INSTALL_PREFIX=;DCMAKE_PREFIX_PATH=;DEFAULT_INSTALL_PATH=" \
    "${MINGW_PREFIX}"/bin/cmake.exe -Wno-dev \
      -GNinja \
      -DCMAKE_INSTALL_PREFIX="${MINGW_PREFIX}" \
      "${_extra_config[@]}" \
      -DCMAKE_PREFIX_PATH="${MINGW_PREFIX}" \
      -DDEFAULT_INSTALL_PATH="${MINGW_PREFIX}" \
      -DwxWidgets_CONFIG_EXECUTABLE="${MINGW_PREFIX}"/bin/wx-config-${_wx_basever} \
      -DOCC_INCLUDE_DIR="${MINGW_PREFIX}"/include/opencascade \
      -DKICAD_SCRIPTING_WXPYTHON=ON \
      -DKICAD_BUILD_I18N=ON \
      -DKICAD_BUILD_QA_TESTS=OFF \
      -DPYTHON_EXECUTABLE="${MINGW_PREFIX}"/bin/python.exe \
      -DPYTHON_INCLUDE_DIR=$("${MINGW_PREFIX}"/bin/python.exe -c "from sysconfig import get_paths as gp; print(gp()[\"include\"])") \
      -DPYTHON_ROOT_DIR="${MINGW_PREFIX}" \
      ../${_realname}-${pkgver}

  "${MINGW_PREFIX}"/bin/cmake.exe --build .
}

package() {
  cd "${srcdir}/build-${MSYSTEM}"
  DESTDIR="${pkgdir}" "${MINGW_PREFIX}"/bin/cmake.exe --install .

  install -Dm644 "${srcdir}/${_realname}-${pkgver}/LICENSE.README" "${pkgdir}${MINGW_PREFIX}/share/licenses/${_realname}/LICENSE.README"
  install -Dm644 "${srcdir}/${_realname}-${pkgver}/LICENSE.GPLv3" "${pkgdir}${MINGW_PREFIX}/share/licenses/${_realname}/LICENSE.GPLv3"
}
