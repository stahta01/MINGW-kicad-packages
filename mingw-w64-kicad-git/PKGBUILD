# Maintainer: Tim Stahlhut <stahta01@gmail.com>

# NOTE: 32 bit packages are currently not building

_realname=kicad
_wx_basever=3.2
_sourcedir=${_realname}-git
pkgbase=mingw-w64-${_realname}-git
pkgname=("${MINGW_PACKAGE_PREFIX}-${_realname}-git")
pkgver=8.0.0~rc3.r55.g0afac71b27
pkgrel=1
pkgdesc="Software for the creation of electronic schematic diagrams and printed circuit board artwork (mingw-w64)"
arch=(any)
mingw_arch=('mingw32' 'mingw64' 'ucrt64' 'clang64' 'clang32')
url="https://www.kicad.org/"
license=("GPLv3+")
groups=("${MINGW_PACKAGE_PREFIX}-eda")
options=()
depends=(
  "${MINGW_PACKAGE_PREFIX}-boost"
  "${MINGW_PACKAGE_PREFIX}-curl"
  "${MINGW_PACKAGE_PREFIX}-glew"
  "${MINGW_PACKAGE_PREFIX}-glm"
  "${MINGW_PACKAGE_PREFIX}-libgit2"
  $([[ "$MSYSTEM_CARCH" != "i686" ]] && echo "${MINGW_PACKAGE_PREFIX}-ngspice")
  "${MINGW_PACKAGE_PREFIX}-python"
  $([[ "$MSYSTEM_CARCH" != "i686" ]] && echo "${MINGW_PACKAGE_PREFIX}-wxPython")
  "${MINGW_PACKAGE_PREFIX}-wxwidgets${_wx_basever}-msw-libs"
  "${MINGW_PACKAGE_PREFIX}-openssl"
  "${MINGW_PACKAGE_PREFIX}-freeglut"
  "${MINGW_PACKAGE_PREFIX}-zlib"
  $([[ ${MINGW_PACKAGE_PREFIX} != *-clang-aarch64* ]] && echo "${MINGW_PACKAGE_PREFIX}-opencascade")
  "${MINGW_PACKAGE_PREFIX}-cairo"
)
makedepends=(
  'git' 'make' 'patch'
  "${MINGW_PACKAGE_PREFIX}-cmake"
  "${MINGW_PACKAGE_PREFIX}-cc"
  "${MINGW_PACKAGE_PREFIX}-doxygen"
  "${MINGW_PACKAGE_PREFIX}-pkg-config"
  "${MINGW_PACKAGE_PREFIX}-swig"
  "${MINGW_PACKAGE_PREFIX}-wxwidgets${_wx_basever}-msw"
)
#_git_commit='2604854221677261ad115c5c0f00f3f10b9296ef' # 7.99.0.r3676.g2604854221
source=(
  '002-ki-7.0-cmake-fixes-for-MINGW-CLANG.patch'
  '003-ki-6.0-code-fixes-for-GNUC-CLANG.patch'
  '006-ki-7.99-rewrite-kiwin32_rc_for_clang.patch'
  '007-ki-7.99-manifest-remove-win10-11-manifest-support.patch'
  '012-ki-8.0-Set-StockEDALibraryPath-to-share-kicad7.0.patch'
  '013-ki-7.99-clang-fmt-Remove-an-ostream-hack-incompatible-with-libc-17.patch'
  '015-ki-6.0-under-ucrt64-define-JSON_SCHEMA_NO_REGEX.patch'
  "${_sourcedir}"::"git+https://github.com/KiCad/kicad-source-mirror.git"
  #"${_sourcedir}"::"git+https://github.com/KiCad/kicad-source-mirror.git#commit=${_git_commit}"
)
sha256sums=('4276daa4de876f2a8f990c3d2177a2ccf8e7c647567764b9ad1a3fae01740275'
            'd8d5f4bdd0aa6d8a907710c523f6f95840636cb2ef69e5275c6ed4966f134353'
            'ae205637669fd2a6fac080b2614b44c42054eb52bd5a4cbe39366b92878f7144'
            'bcaedbd7ffb328e4030fb2353fac875d04b1554c8b4ff4bf9539dcfc2ce33304'
            '756d2ce71e74c44fdde52c97abbe71bb8852d538b009615fb910afb4d5ff3c8f'
            'f76c30ea94a7a6747bb5b3177beedfd40e9f3912de5248e41d86e7b868375438'
            '263632b211ef9646e49d3e7083bbe4cefe0c7064db7caac248aecae5541cc544'
            'SKIP')
# =========================================== #
# Helper macros to help make tasks easier     #
apply_patch_with_msg() {
  for _patch in "$@"
  do
    if patch --dry-run -Rbp1 -i "${srcdir}/${_patch}" > /dev/null 2>&1 ; then
      msg2 "Skipping ${_patch} because it likely was already applied"
    else
      msg2 "Applying ${_patch}"
      patch -Nbp1 -i "${srcdir}/${_patch}"
    fi
  done
}

pkgver() {
  cd ${srcdir}/${_sourcedir}
  ( set -o pipefail
    _version1=$( head -n 200 cmake/KiCadVersion.cmake | grep 'KICAD_SEMANTIC_VERSION "' | sed -e 's/KICAD_SEMANTIC_VERSION//' | sed -e 's/-unknown//' | sed -e 's/set//' | tr -d '() "' )
    _version2=$( echo ${_version1} | tr -d '-' )
    _revcount1=$(git rev-list --count $(git log -1 --format=%H -- cmake/KiCadVersion.cmake)..HEAD)
    printf "%s.r%s.g%s" "${_version2}" ${_revcount1} $(git rev-parse --short HEAD)
  )
}

prepare() {
  cd ${srcdir}/${_sourcedir}

  # The next four patch files are needed to get CLANG64/32 to build
  patch -Np1 -i "${srcdir}"/002-ki-7.0-cmake-fixes-for-MINGW-CLANG.patch
  patch -Np1 -i "${srcdir}"/003-ki-6.0-code-fixes-for-GNUC-CLANG.patch
  patch -Np1 -i "${srcdir}"/006-ki-7.99-rewrite-kiwin32_rc_for_clang.patch
  patch -Np1 -i "${srcdir}"/013-ki-7.99-clang-fmt-Remove-an-ostream-hack-incompatible-with-libc-17.patch
  # This patch allows me to test program using my old Intel GPU driver under win10
  patch -Np1 -i "${srcdir}"/007-ki-7.99-manifest-remove-win10-11-manifest-support.patch
  # This patch changes library search location
  patch -Np1 -i "${srcdir}"/012-ki-8.0-Set-StockEDALibraryPath-to-share-kicad7.0.patch
  # Hack to work around UCRT64 PCM lockup
  patch -Np1 -i "${srcdir}"/015-ki-6.0-under-ucrt64-define-JSON_SCHEMA_NO_REGEX.patch
}

build() {
  cd "${srcdir}"
  msg2 "Build kicad"
  [[ -d build-${MSYSTEM} ]] && rm -rf build-${MSYSTEM}
  mkdir -p build-${MSYSTEM} && cd build-${MSYSTEM}

  local -a extra_config
  if check_option "debug" "y"; then
    extra_config+=( -DCMAKE_BUILD_TYPE=Debug )
  else
    extra_config+=( -DCMAKE_BUILD_TYPE=Release )
  fi

  if [[ ${MINGW_PACKAGE_PREFIX} != *-clang-aarch64* ]]; then
    extra_config+=( -DOCC_INCLUDE_DIR=${MINGW_PREFIX}/include/opencascade )
  fi

  if [[ "$MSYSTEM_CARCH" == "i686" ]]; then
    extra_config+=( -DKICAD_SPICE=OFF )
    extra_config+=( -DKICAD_SCRIPTING_WXPYTHON=OFF )
  else
    extra_config+=( -DKICAD_SCRIPTING_WXPYTHON=ON )
  fi

  #extra_config+=( -DCMAKE_VERBOSE_MAKEFILE:BOOL=ON )

  MSYS2_ARG_CONV_EXCL="-DCMAKE_INSTALL_PREFIX=;DCMAKE_PREFIX_PATH=;DEFAULT_INSTALL_PATH=" \
  ${MINGW_PREFIX}/bin/cmake.exe \
    -G "MSYS Makefiles" \
    -DCMAKE_PREFIX_PATH=${MINGW_PREFIX} \
    -DCMAKE_INSTALL_PREFIX=${MINGW_PREFIX} \
    "${extra_config[@]}" \
    -DDEFAULT_INSTALL_PATH=${MINGW_PREFIX} \
    -DwxWidgets_CONFIG_EXECUTABLE=${MINGW_PREFIX}/bin/wx-config-${_wx_basever} \
    -DKICAD_USE_OCC="$( [[ ${MINGW_PACKAGE_PREFIX} == *-clang-aarch64* ]] && echo "OFF" || echo "ON" )" \
    -DKICAD_SCRIPTING_WXPYTHON=ON \
    -DKICAD_SCRIPTING=ON \
    -DKICAD_SCRIPTING_PYTHON3=ON \
    -DKICAD_BUILD_QA_TESTS=OFF \
    -DPYTHON_EXECUTABLE=${MINGW_PREFIX}/bin/python.exe \
    -DPYTHON_INCLUDE_DIR=$(${MINGW_PREFIX}/bin/python.exe -c "from sysconfig import get_paths as gp; print(gp()[\"include\"])") \
    -DPYTHON_ROOT_DIR=${MINGW_PREFIX} \
    -DKICAD_BUILD_I18N=ON \
    ../${_sourcedir}

  cd ${srcdir}/build-${MSYSTEM}
  make || make VERBOSE=1 --jobs=1
}

_doc=("ca" "de" "en" "es" "fr" "id" "it" "ja" "nl" "pl" "ru" "zh")
_sub=("footprints" "symbols" "templates" "packages3D")

for _doclang in ${_doc[@]}; do _doc_pkg+=("\"${MINGW_PACKAGE_PREFIX}-${_realname}-doc-${_doclang}: Documentation for KiCad (mingw-w64)\""); done
for _feature in ${_sub[@]}; do _sub_pkg+=("\"${MINGW_PACKAGE_PREFIX}-${_realname}-${_feature}\""); done

optdepends=()

eval "package_${MINGW_PACKAGE_PREFIX}-${_realname}-git() {

  msg2 \"Package kicad\"
  optdepends+=(${_doc_pkg[@]} ${_sub_pkg[@]})
  conflicts=(${MINGW_PACKAGE_PREFIX}-${_realname})
  provides=(${MINGW_PACKAGE_PREFIX}-${_realname})

  cd \${srcdir}/build-${MSYSTEM}
  make DESTDIR=\${pkgdir} install
}"
